/*
 * test
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BatchWebServiceResult;
import io.swagger.client.model.Error;
import java.io.File;
import io.swagger.client.model.InputParameters;
import io.swagger.client.model.StartBatchExecutionResponse;
import io.swagger.client.model.WebServiceResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestApi {
    private ApiClient apiClient;

    public TestApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for add */
    private com.squareup.okhttp.Call addCall(InputParameters webServiceParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = webServiceParameters;
        
        // create path and map variables
        String localVarPath = "/api/test/v1.0.0".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addValidateBeforeCall(InputParameters webServiceParameters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'webServiceParameters' is set
        if (webServiceParameters == null) {
            throw new ApiException("Missing the required parameter 'webServiceParameters' when calling add(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addCall(webServiceParameters, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Consume the test web service.
     * @param webServiceParameters Input parameters to the web service. (required)
     * @return WebServiceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebServiceResult add(InputParameters webServiceParameters) throws ApiException {
        ApiResponse<WebServiceResult> resp = addWithHttpInfo(webServiceParameters);
        return resp.getData();
    }

    /**
     * 
     * Consume the test web service.
     * @param webServiceParameters Input parameters to the web service. (required)
     * @return ApiResponse&lt;WebServiceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebServiceResult> addWithHttpInfo(InputParameters webServiceParameters) throws ApiException {
        com.squareup.okhttp.Call call = addValidateBeforeCall(webServiceParameters, null, null);
        Type localVarReturnType = new TypeToken<WebServiceResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Consume the test web service.
     * @param webServiceParameters Input parameters to the web service. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addAsync(InputParameters webServiceParameters, final ApiCallback<WebServiceResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addValidateBeforeCall(webServiceParameters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebServiceResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for cancelAndDeleteBatchExecution */
    private com.squareup.okhttp.Call cancelAndDeleteBatchExecutionCall(String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/test/v1.0.0/batch/{executionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelAndDeleteBatchExecutionValidateBeforeCall(String executionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling cancelAndDeleteBatchExecution(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cancelAndDeleteBatchExecutionCall(executionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Cancels and deletes all batch executions for test.
     * 
     * @param executionId Execution id of the execution. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> cancelAndDeleteBatchExecution(String executionId) throws ApiException {
        ApiResponse<List<String>> resp = cancelAndDeleteBatchExecutionWithHttpInfo(executionId);
        return resp.getData();
    }

    /**
     * Cancels and deletes all batch executions for test.
     * 
     * @param executionId Execution id of the execution. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> cancelAndDeleteBatchExecutionWithHttpInfo(String executionId) throws ApiException {
        com.squareup.okhttp.Call call = cancelAndDeleteBatchExecutionValidateBeforeCall(executionId, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancels and deletes all batch executions for test. (asynchronously)
     * 
     * @param executionId Execution id of the execution. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelAndDeleteBatchExecutionAsync(String executionId, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelAndDeleteBatchExecutionValidateBeforeCall(executionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getBatchExecutionFile */
    private com.squareup.okhttp.Call getBatchExecutionFileCall(String executionId, Integer index, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/test/v1.0.0/batch/{executionId}/{index}/files/{fileName}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()))
        .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()))
        .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBatchExecutionFileValidateBeforeCall(String executionId, Integer index, String fileName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling getBatchExecutionFile(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling getBatchExecutionFile(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getBatchExecutionFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getBatchExecutionFileCall(executionId, index, fileName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a specific file from an execution in test.
     * 
     * @param executionId Execution id of the execution (required)
     * @param index Index of the execution in the batch. (required)
     * @param fileName Name of the file to be returned. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getBatchExecutionFile(String executionId, Integer index, String fileName) throws ApiException {
        ApiResponse<File> resp = getBatchExecutionFileWithHttpInfo(executionId, index, fileName);
        return resp.getData();
    }

    /**
     * Gets a specific file from an execution in test.
     * 
     * @param executionId Execution id of the execution (required)
     * @param index Index of the execution in the batch. (required)
     * @param fileName Name of the file to be returned. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getBatchExecutionFileWithHttpInfo(String executionId, Integer index, String fileName) throws ApiException {
        com.squareup.okhttp.Call call = getBatchExecutionFileValidateBeforeCall(executionId, index, fileName, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a specific file from an execution in test. (asynchronously)
     * 
     * @param executionId Execution id of the execution (required)
     * @param index Index of the execution in the batch. (required)
     * @param fileName Name of the file to be returned. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBatchExecutionFileAsync(String executionId, Integer index, String fileName, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBatchExecutionFileValidateBeforeCall(executionId, index, fileName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getBatchExecutionFiles */
    private com.squareup.okhttp.Call getBatchExecutionFilesCall(String executionId, Integer index, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/test/v1.0.0/batch/{executionId}/{index}/files".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()))
        .replaceAll("\\{" + "index" + "\\}", apiClient.escapeString(index.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBatchExecutionFilesValidateBeforeCall(String executionId, Integer index, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling getBatchExecutionFiles(Async)");
        }
        
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling getBatchExecutionFiles(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getBatchExecutionFilesCall(executionId, index, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all files from an individual execution in test.
     * 
     * @param executionId Execution id of the execution (required)
     * @param index Index of the execution in the batch. (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getBatchExecutionFiles(String executionId, Integer index) throws ApiException {
        ApiResponse<List<String>> resp = getBatchExecutionFilesWithHttpInfo(executionId, index);
        return resp.getData();
    }

    /**
     * Gets all files from an individual execution in test.
     * 
     * @param executionId Execution id of the execution (required)
     * @param index Index of the execution in the batch. (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> getBatchExecutionFilesWithHttpInfo(String executionId, Integer index) throws ApiException {
        com.squareup.okhttp.Call call = getBatchExecutionFilesValidateBeforeCall(executionId, index, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all files from an individual execution in test. (asynchronously)
     * 
     * @param executionId Execution id of the execution (required)
     * @param index Index of the execution in the batch. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBatchExecutionFilesAsync(String executionId, Integer index, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBatchExecutionFilesValidateBeforeCall(executionId, index, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getBatchExecutionStatus */
    private com.squareup.okhttp.Call getBatchExecutionStatusCall(String executionId, Boolean showPartialResults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/test/v1.0.0/batch/{executionId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "executionId" + "\\}", apiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (showPartialResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "showPartialResults", showPartialResults));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBatchExecutionStatusValidateBeforeCall(String executionId, Boolean showPartialResults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling getBatchExecutionStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getBatchExecutionStatusCall(executionId, showPartialResults, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all batch executions for test.
     * 
     * @param executionId Execution id of the execution (required)
     * @param showPartialResults Returns the already processed results of the batch execution even if it hasn&#39;t been fully completed. (optional)
     * @return BatchWebServiceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BatchWebServiceResult getBatchExecutionStatus(String executionId, Boolean showPartialResults) throws ApiException {
        ApiResponse<BatchWebServiceResult> resp = getBatchExecutionStatusWithHttpInfo(executionId, showPartialResults);
        return resp.getData();
    }

    /**
     * Gets all batch executions for test.
     * 
     * @param executionId Execution id of the execution (required)
     * @param showPartialResults Returns the already processed results of the batch execution even if it hasn&#39;t been fully completed. (optional)
     * @return ApiResponse&lt;BatchWebServiceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BatchWebServiceResult> getBatchExecutionStatusWithHttpInfo(String executionId, Boolean showPartialResults) throws ApiException {
        com.squareup.okhttp.Call call = getBatchExecutionStatusValidateBeforeCall(executionId, showPartialResults, null, null);
        Type localVarReturnType = new TypeToken<BatchWebServiceResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all batch executions for test. (asynchronously)
     * 
     * @param executionId Execution id of the execution (required)
     * @param showPartialResults Returns the already processed results of the batch execution even if it hasn&#39;t been fully completed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBatchExecutionStatusAsync(String executionId, Boolean showPartialResults, final ApiCallback<BatchWebServiceResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBatchExecutionStatusValidateBeforeCall(executionId, showPartialResults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BatchWebServiceResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getBatchExecutions */
    private com.squareup.okhttp.Call getBatchExecutionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/test/v1.0.0/batch".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBatchExecutionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getBatchExecutionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets all batch executions for test.
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getBatchExecutions() throws ApiException {
        ApiResponse<List<String>> resp = getBatchExecutionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets all batch executions for test.
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> getBatchExecutionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getBatchExecutionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all batch executions for test. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBatchExecutionsAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBatchExecutionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for startBatchExecution */
    private com.squareup.okhttp.Call startBatchExecutionCall(List<InputParameters> batchWebServiceParameters, Integer parallelCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = batchWebServiceParameters;
        
        // create path and map variables
        String localVarPath = "/api/test/v1.0.0/batch".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (parallelCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parallelCount", parallelCount));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startBatchExecutionValidateBeforeCall(List<InputParameters> batchWebServiceParameters, Integer parallelCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'batchWebServiceParameters' is set
        if (batchWebServiceParameters == null) {
            throw new ApiException("Missing the required parameter 'batchWebServiceParameters' when calling startBatchExecution(Async)");
        }
        
        
        com.squareup.okhttp.Call call = startBatchExecutionCall(batchWebServiceParameters, parallelCount, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Consume the test web service asynchronously.
     * @param batchWebServiceParameters Input parameters to the web service. (required)
     * @param parallelCount Number of threads used to process entries in the batch. Default value is 10. Please make sure not to use too high of a number because it might negatively impact performance. (optional)
     * @return StartBatchExecutionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StartBatchExecutionResponse startBatchExecution(List<InputParameters> batchWebServiceParameters, Integer parallelCount) throws ApiException {
        ApiResponse<StartBatchExecutionResponse> resp = startBatchExecutionWithHttpInfo(batchWebServiceParameters, parallelCount);
        return resp.getData();
    }

    /**
     * 
     * Consume the test web service asynchronously.
     * @param batchWebServiceParameters Input parameters to the web service. (required)
     * @param parallelCount Number of threads used to process entries in the batch. Default value is 10. Please make sure not to use too high of a number because it might negatively impact performance. (optional)
     * @return ApiResponse&lt;StartBatchExecutionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StartBatchExecutionResponse> startBatchExecutionWithHttpInfo(List<InputParameters> batchWebServiceParameters, Integer parallelCount) throws ApiException {
        com.squareup.okhttp.Call call = startBatchExecutionValidateBeforeCall(batchWebServiceParameters, parallelCount, null, null);
        Type localVarReturnType = new TypeToken<StartBatchExecutionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Consume the test web service asynchronously.
     * @param batchWebServiceParameters Input parameters to the web service. (required)
     * @param parallelCount Number of threads used to process entries in the batch. Default value is 10. Please make sure not to use too high of a number because it might negatively impact performance. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startBatchExecutionAsync(List<InputParameters> batchWebServiceParameters, Integer parallelCount, final ApiCallback<StartBatchExecutionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startBatchExecutionValidateBeforeCall(batchWebServiceParameters, parallelCount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StartBatchExecutionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
