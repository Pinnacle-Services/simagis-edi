/*
 * test
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.Configuration;
import io.swagger.client.model.*;

import java.io.File;

import io.swagger.client.model.Error;
import org.junit.Test;
import org.junit.Ignore;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TestApi
 */
@Ignore
public class TestApiTest {

    private final TestApi api = new TestApi();
    private final UserApi userApi = new UserApi();

    /**
     * Consume the test web service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTest() throws ApiException {
        LoginRequest loginRequest = new LoginRequest();
        loginRequest.setUsername("admin");
        loginRequest.setPassword("!Khvatkov1");
        AccessTokenResponse token = userApi.login(loginRequest);

        final String authorization = token.getTokenType() + " " + token.getAccessToken();
        Configuration.getDefaultApiClient().addDefaultHeader("Authorization", authorization);

        InputParameters webServiceParameters = new InputParameters();
        webServiceParameters.setX(BigDecimal.valueOf(123));
        webServiceParameters.setY(BigDecimal.valueOf(456));
        WebServiceResult response = api.add(webServiceParameters);

        if (response.getSuccess()) {
            final OutputParameters outputParameters = response.getOutputParameters();
            System.out.println("result: " + outputParameters.getResult());
        }
    }

    /**
     * Cancels and deletes all batch executions for test.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelAndDeleteBatchExecutionTest() throws ApiException {
        String executionId = null;
        List<String> response = api.cancelAndDeleteBatchExecution(executionId);

        // TODO: test validations
    }

    /**
     * Gets a specific file from an execution in test.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchExecutionFileTest() throws ApiException {
        String executionId = null;
        Integer index = null;
        String fileName = null;
        File response = api.getBatchExecutionFile(executionId, index, fileName);

        // TODO: test validations
    }

    /**
     * Gets all files from an individual execution in test.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchExecutionFilesTest() throws ApiException {
        String executionId = null;
        Integer index = null;
        List<String> response = api.getBatchExecutionFiles(executionId, index);

        // TODO: test validations
    }

    /**
     * Gets all batch executions for test.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchExecutionStatusTest() throws ApiException {
        String executionId = null;
        Boolean showPartialResults = null;
        BatchWebServiceResult response = api.getBatchExecutionStatus(executionId, showPartialResults);

        // TODO: test validations
    }

    /**
     * Gets all batch executions for test.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchExecutionsTest() throws ApiException {
        List<String> response = api.getBatchExecutions();

        // TODO: test validations
    }

    /**
     * Consume the test web service asynchronously.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startBatchExecutionTest() throws ApiException {
        List<InputParameters> batchWebServiceParameters = null;
        Integer parallelCount = null;
        StartBatchExecutionResponse response = api.startBatchExecution(batchWebServiceParameters, parallelCount);

        // TODO: test validations
    }

}
